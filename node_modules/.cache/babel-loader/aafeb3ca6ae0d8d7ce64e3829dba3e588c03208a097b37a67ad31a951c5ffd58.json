{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jan\\\\Downloads\\\\Familien App\\\\src\\\\FoodOrder.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { supabase } from './supabaseClient';\nimport './FoodOrder.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst STATUS_OPTIONS = ['Bestellt', 'In Zubereitung', 'Abholbereit', 'Erledigt'];\nexport default function FoodOrder({\n  user\n}) {\n  _s();\n  const [orders, setOrders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [form, setForm] = useState({\n    details: ''\n  });\n  const [error, setError] = useState(null);\n  const isParent = user.name.toLowerCase() === 'admin'; // Annahme: Admin-User sind die Eltern\n\n  const fetchOrders = useCallback(async () => {\n    setLoading(true);\n    const {\n      data,\n      error\n    } = await supabase.from('food_orders').select('*').neq('status', 'Erledigt') // Zeige keine erledigten Bestellungen\n    .order('created_at', {\n      ascending: true\n    });\n    if (error) {\n      setError('Fehler beim Laden der Bestellungen.');\n      setOrders([]);\n    } else {\n      setOrders(data);\n    }\n    setLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchOrders();\n    const channel = supabase.channel('food_orders').on('postgres_changes', {\n      event: '*',\n      schema: 'public',\n      table: 'food_orders'\n    }, payload => {\n      fetchOrders();\n    }).subscribe();\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [fetchOrders]);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setForm(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleAddOrder = async e => {\n    e.preventDefault();\n    if (!form.details) return;\n    const {\n      error\n    } = await supabase.from('food_orders').insert([{\n      details: form.details,\n      ordered_by: user.name\n    }]);\n    if (error) {\n      setError('Fehler beim Aufgeben der Bestellung.');\n    } else {\n      setForm({\n        details: ''\n      });\n      setError(null);\n    }\n  };\n  const updateStatus = async (id, newStatus) => {\n    await supabase.from('food_orders').update({\n      status: newStatus\n    }).eq('id', id);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"food-order-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Essens-Bestellung\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), !isParent && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleAddOrder,\n      className: \"add-order-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Was m\\xF6chtest du essen?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"details\",\n        placeholder: \"z.B. Nudeln mit Tomatenso\\xDFe und ein Wasser\",\n        value: form.details,\n        onChange: handleInputChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Bestellung abschicken\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"order-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Aktuelle Bestellungen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Lade Bestellungen...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [orders.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"empty-list\",\n          children: \"Keine offenen Bestellungen.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 37\n        }, this), orders.map(order => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `order-item status-${order.status.replace(/\\s+/g, '-')}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"order-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: order.details\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 22\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"ordered-by\",\n              children: [\"Bestellt von: \", order.ordered_by]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"order-status\",\n            children: isParent ? /*#__PURE__*/_jsxDEV(\"select\", {\n              value: order.status,\n              onChange: e => updateStatus(order.id, e.target.value),\n              children: STATUS_OPTIONS.map(opt => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: opt,\n                children: opt\n              }, opt, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 50\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Status: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: order.status\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 35\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this)]\n        }, order.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(FoodOrder, \"X9cTHzb2x9NBP41eW2jPWVEFxno=\");\n_c = FoodOrder;\nvar _c;\n$RefreshReg$(_c, \"FoodOrder\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","supabase","jsxDEV","_jsxDEV","Fragment","_Fragment","STATUS_OPTIONS","FoodOrder","user","_s","orders","setOrders","loading","setLoading","form","setForm","details","error","setError","isParent","name","toLowerCase","fetchOrders","data","from","select","neq","order","ascending","channel","on","event","schema","table","payload","subscribe","removeChannel","handleInputChange","e","value","target","prev","handleAddOrder","preventDefault","insert","ordered_by","updateStatus","id","newStatus","update","status","eq","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","placeholder","onChange","required","type","length","map","replace","opt","_c","$RefreshReg$"],"sources":["C:/Users/Jan/Downloads/Familien App/src/FoodOrder.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { supabase } from './supabaseClient';\nimport './FoodOrder.css';\n\nconst STATUS_OPTIONS = ['Bestellt', 'In Zubereitung', 'Abholbereit', 'Erledigt'];\n\nexport default function FoodOrder({ user }) {\n  const [orders, setOrders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [form, setForm] = useState({ details: '' });\n  const [error, setError] = useState(null);\n\n  const isParent = user.name.toLowerCase() === 'admin'; // Annahme: Admin-User sind die Eltern\n\n  const fetchOrders = useCallback(async () => {\n    setLoading(true);\n    const { data, error } = await supabase\n      .from('food_orders')\n      .select('*')\n      .neq('status', 'Erledigt') // Zeige keine erledigten Bestellungen\n      .order('created_at', { ascending: true });\n\n    if (error) {\n      setError('Fehler beim Laden der Bestellungen.');\n      setOrders([]);\n    } else {\n      setOrders(data);\n    }\n    setLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchOrders();\n\n    const channel = supabase.channel('food_orders')\n      .on('postgres_changes', { event: '*', schema: 'public', table: 'food_orders' }, payload => {\n        fetchOrders();\n      })\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [fetchOrders]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setForm(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleAddOrder = async (e) => {\n    e.preventDefault();\n    if (!form.details) return;\n\n    const { error } = await supabase.from('food_orders').insert([\n      {\n        details: form.details,\n        ordered_by: user.name,\n      }\n    ]);\n\n    if (error) {\n      setError('Fehler beim Aufgeben der Bestellung.');\n    } else {\n      setForm({ details: '' });\n      setError(null);\n    }\n  };\n\n  const updateStatus = async (id, newStatus) => {\n    await supabase\n      .from('food_orders')\n      .update({ status: newStatus })\n      .eq('id', id);\n  };\n\n  return (\n    <div className=\"food-order-container\">\n      <h2>Essens-Bestellung</h2>\n\n      {!isParent && (\n        <form onSubmit={handleAddOrder} className=\"add-order-form\">\n          <h3>Was möchtest du essen?</h3>\n          <textarea\n            name=\"details\"\n            placeholder=\"z.B. Nudeln mit Tomatensoße und ein Wasser\"\n            value={form.details}\n            onChange={handleInputChange}\n            required\n          />\n          <button type=\"submit\">Bestellung abschicken</button>\n        </form>\n      )}\n\n      {error && <p className=\"error-message\">{error}</p>}\n\n      <div className=\"order-list\">\n        <h3>Aktuelle Bestellungen</h3>\n        {loading ? (\n          <p>Lade Bestellungen...</p>\n        ) : (\n          <>\n            {orders.length === 0 && <p className=\"empty-list\">Keine offenen Bestellungen.</p>}\n            {orders.map(order => (\n              <div key={order.id} className={`order-item status-${order.status.replace(/\\s+/g, '-')}`}>\n                <div className=\"order-details\">\n                  <p><strong>{order.details}</strong></p>\n                  <span className=\"ordered-by\">Bestellt von: {order.ordered_by}</span>\n                </div>\n                <div className=\"order-status\">\n                  {isParent ? (\n                    <select \n                      value={order.status}\n                      onChange={(e) => updateStatus(order.id, e.target.value)}\n                    >\n                      {STATUS_OPTIONS.map(opt => <option key={opt} value={opt}>{opt}</option>)}\n                    </select>\n                  ) : (\n                    <span>Status: <strong>{order.status}</strong></span>\n                  )}\n                </div>\n              </div>\n            ))}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}